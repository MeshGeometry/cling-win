# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget clingInterpreter clingMetaProcessor clingUserInterface clingUtils libclingJupyter libcling)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target clingInterpreter
add_library(clingInterpreter STATIC IMPORTED)

set_target_properties(clingInterpreter PROPERTIES
  INTERFACE_LINK_LIBRARIES "clangDriver;clangFrontend;clangParse;clangSema;clangAST;clangLex;clangSerialization;clangCodeGen;clangBasic;clingUtils;LLVMAnalysis;LLVMCore;LLVMExecutionEngine;LLVMipo;LLVMMC;LLVMObject;LLVMOption;LLVMOrcJIT;LLVMRuntimeDyld;LLVMScalarOpts;LLVMSupport;LLVMTarget;LLVMTransformUtils;LLVMAArch64CodeGen;LLVMAArch64AsmPrinter;LLVMAArch64AsmParser;LLVMAArch64Desc;LLVMAArch64Info;LLVMAArch64Disassembler;LLVMAArch64Info;LLVMAArch64Utils;LLVMAMDGPUCodeGen;LLVMAMDGPUAsmPrinter;LLVMAMDGPUAsmParser;LLVMAMDGPUDesc;LLVMAMDGPUInfo;LLVMAMDGPUDisassembler;LLVMAMDGPUInfo;LLVMAMDGPUUtils;LLVMARMCodeGen;LLVMARMAsmPrinter;LLVMARMAsmParser;LLVMARMDesc;LLVMARMInfo;LLVMARMDisassembler;LLVMARMInfo;LLVMBPFCodeGen;LLVMBPFAsmPrinter;LLVMBPFDesc;LLVMBPFInfo;LLVMBPFDisassembler;LLVMBPFInfo;LLVMHexagonCodeGen;LLVMHexagonAsmParser;LLVMHexagonDesc;LLVMHexagonInfo;LLVMHexagonDisassembler;LLVMHexagonInfo;LLVMLanaiCodeGen;LLVMLanaiAsmPrinter;LLVMLanaiAsmParser;LLVMLanaiDesc;LLVMLanaiInfo;LLVMLanaiDisassembler;LLVMLanaiInfo;LLVMMipsCodeGen;LLVMMipsAsmPrinter;LLVMMipsAsmParser;LLVMMipsDesc;LLVMMipsInfo;LLVMMipsDisassembler;LLVMMipsInfo;LLVMMSP430CodeGen;LLVMMSP430AsmPrinter;LLVMMSP430Desc;LLVMMSP430Info;LLVMMSP430Info;LLVMNVPTXCodeGen;LLVMNVPTXAsmPrinter;LLVMNVPTXDesc;LLVMNVPTXInfo;LLVMNVPTXInfo;LLVMPowerPCCodeGen;LLVMPowerPCAsmPrinter;LLVMPowerPCAsmParser;LLVMPowerPCDesc;LLVMPowerPCInfo;LLVMPowerPCDisassembler;LLVMPowerPCInfo;LLVMSparcCodeGen;LLVMSparcAsmPrinter;LLVMSparcAsmParser;LLVMSparcDesc;LLVMSparcInfo;LLVMSparcDisassembler;LLVMSparcInfo;LLVMSystemZCodeGen;LLVMSystemZAsmPrinter;LLVMSystemZAsmParser;LLVMSystemZDesc;LLVMSystemZInfo;LLVMSystemZDisassembler;LLVMSystemZInfo;LLVMX86CodeGen;LLVMX86AsmPrinter;LLVMX86AsmParser;LLVMX86Desc;LLVMX86Info;LLVMX86Disassembler;LLVMX86Info;LLVMX86Utils;LLVMXCoreCodeGen;LLVMXCoreAsmPrinter;LLVMXCoreDesc;LLVMXCoreInfo;LLVMXCoreDisassembler;LLVMXCoreInfo"
)

# Create imported target clingMetaProcessor
add_library(clingMetaProcessor STATIC IMPORTED)

set_target_properties(clingMetaProcessor PROPERTIES
  INTERFACE_LINK_LIBRARIES "clangLex;clangAST;clangBasic;clingInterpreter;clingUtils;LLVMCore;LLVMSupport"
)

# Create imported target clingUserInterface
add_library(clingUserInterface STATIC IMPORTED)

set_target_properties(clingUserInterface PROPERTIES
  INTERFACE_LINK_LIBRARIES "clingMetaProcessor;clingInterpreter;clingUtils;LLVMSupport"
)

# Create imported target clingUtils
add_library(clingUtils STATIC IMPORTED)

set_target_properties(clingUtils PROPERTIES
  INTERFACE_LINK_LIBRARIES "clangSema;clangAST;clangLex;clangBasic;clangParse;LLVMSupport"
)

# Create imported target libclingJupyter
add_library(libclingJupyter SHARED IMPORTED)

# Create imported target libcling
add_library(libcling SHARED IMPORTED)

if(CMAKE_VERSION VERSION_LESS 2.8.12)
  message(FATAL_ERROR "This file relies on consumers using CMake 2.8.12 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/ClingTargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# Make sure the targets which have been exported in some other 
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "clangDriver" "clangFrontend" "clangParse" "clangSema" "clangAST" "clangLex" "clangSerialization" "clangCodeGen" "clangBasic" "LLVMAnalysis" "LLVMCore" "LLVMExecutionEngine" "LLVMipo" "LLVMMC" "LLVMObject" "LLVMOption" "LLVMOrcJIT" "LLVMRuntimeDyld" "LLVMScalarOpts" "LLVMSupport" "LLVMTarget" "LLVMTransformUtils" "LLVMAArch64CodeGen" "LLVMAArch64AsmPrinter" "LLVMAArch64AsmParser" "LLVMAArch64Desc" "LLVMAArch64Info" "LLVMAArch64Disassembler" "LLVMAArch64Utils" "LLVMAMDGPUCodeGen" "LLVMAMDGPUAsmPrinter" "LLVMAMDGPUAsmParser" "LLVMAMDGPUDesc" "LLVMAMDGPUInfo" "LLVMAMDGPUDisassembler" "LLVMAMDGPUUtils" "LLVMARMCodeGen" "LLVMARMAsmPrinter" "LLVMARMAsmParser" "LLVMARMDesc" "LLVMARMInfo" "LLVMARMDisassembler" "LLVMBPFCodeGen" "LLVMBPFAsmPrinter" "LLVMBPFDesc" "LLVMBPFInfo" "LLVMBPFDisassembler" "LLVMHexagonCodeGen" "LLVMHexagonAsmParser" "LLVMHexagonDesc" "LLVMHexagonInfo" "LLVMHexagonDisassembler" "LLVMLanaiCodeGen" "LLVMLanaiAsmPrinter" "LLVMLanaiAsmParser" "LLVMLanaiDesc" "LLVMLanaiInfo" "LLVMLanaiDisassembler" "LLVMMipsCodeGen" "LLVMMipsAsmPrinter" "LLVMMipsAsmParser" "LLVMMipsDesc" "LLVMMipsInfo" "LLVMMipsDisassembler" "LLVMMSP430CodeGen" "LLVMMSP430AsmPrinter" "LLVMMSP430Desc" "LLVMMSP430Info" "LLVMNVPTXCodeGen" "LLVMNVPTXAsmPrinter" "LLVMNVPTXDesc" "LLVMNVPTXInfo" "LLVMPowerPCCodeGen" "LLVMPowerPCAsmPrinter" "LLVMPowerPCAsmParser" "LLVMPowerPCDesc" "LLVMPowerPCInfo" "LLVMPowerPCDisassembler" "LLVMSparcCodeGen" "LLVMSparcAsmPrinter" "LLVMSparcAsmParser" "LLVMSparcDesc" "LLVMSparcInfo" "LLVMSparcDisassembler" "LLVMSystemZCodeGen" "LLVMSystemZAsmPrinter" "LLVMSystemZAsmParser" "LLVMSystemZDesc" "LLVMSystemZInfo" "LLVMSystemZDisassembler" "LLVMX86CodeGen" "LLVMX86AsmPrinter" "LLVMX86AsmParser" "LLVMX86Desc" "LLVMX86Info" "LLVMX86Disassembler" "LLVMX86Utils" "LLVMXCoreCodeGen" "LLVMXCoreAsmPrinter" "LLVMXCoreDesc" "LLVMXCoreInfo" "LLVMXCoreDisassembler" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
